unit uCarDetector;

interface

uses uHttpDownloader, uExUtils, uSpyTaxiTypes, Classes, uJSONParser;

type
  TCarDetector = class
  private
    FHttpDownloader: THttpDownloader;
    FOnLogMessage: TLogMessageEvent;
    FTaxiParser: TTaxiParser;
    FOnCarDetect: TCarDetectEvent;

    procedure DoCarDetectEvent(const ACarPosition: TCarPosition; const AId: string);
    procedure DoLogMessage(const AMessage: string);
  public
    property OnLogMessage: TLogMessageEvent read FOnLogMessage write FOnLogMessage;
    property OnCarDetected: TCarDetectEvent read FOnCarDetect write FOnCarDetect;

    procedure LoadCars(const AZonePosition: TZonePosition);

    procedure AfterConstruction; override;
    procedure BeforeDestruction; override;
  end;

const
  constTaxiUrl = 'https://tc.mobile.yandex.net/3.0/nearestdrivers?block_id=default';

implementation

{ TCarDetector }

procedure TCarDetector.AfterConstruction;
begin
  inherited;
  FHttpDownloader := THttpDownloader.Create;
  FTaxiParser := TTaxiParser.Create;
end;

procedure TCarDetector.BeforeDestruction;
begin
  FreeAndNilEx(FHttpDownloader);
  inherited;
end;

procedure TCarDetector.DoCarDetectEvent(const ACarPosition: TCarPosition; const AId: string);
begin
  if Assigned(FOnCarDetect) then
  begin
    FOnCarDetect(ACarPosition, AId);
  end;
end;

procedure TCarDetector.DoLogMessage(const AMessage: string);
begin
  if Assigned(FOnLogMessage) then
  begin
    FOnLogMessage(AMessage);
  end;

end;

procedure TCarDetector.LoadCars(const AZonePosition: TZonePosition);
var
  lPostList: TStringStream;
  lResponseContent: string;
  lErrorStr: string;
begin
  lResponseContent := '';
  lPostList := TStringStream.Create(TJSONContent.GetJSONContent(AZonePosition));
  try
    if not FHttpDownloader.Post(constTaxiUrl, lPostList, lResponseContent, lErrorStr) then
    begin
      DoLogMessage(lErrorStr);
    end
    else
    begin
      FTaxiParser.OnCarDetected := FOnCarDetect;
      FTaxiParser.ParseTaxi(lResponseContent);
    end;
  finally
    FreeAndNilEx(lPostList);
  end;
end;

end.
